{"ast":null,"code":"var _jsxFileName = \"E:\\\\Files\\\\Dashboard\\\\src\\\\Components\\\\Timer\\\\TimerLoading.jsx\";\nimport React, { useState } from 'react';\nimport styles from './TimerLoading.module.css';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport Navbar from '../Pages/Navbar';\nconst options = [10, 20, 30, 40, 50];\nconst TimerLoading = () => {\n  const [selectedTime, setSelectedTime] = useState(10);\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  const handleSelectChange = e => {\n    const newValue = parseInt(e.target.value);\n    setSelectedTime(newValue);\n    setIsTimerActive(false); // Stop the timer when a new value is selected\n  };\n\n  const handleResetClick = () => {\n    setIsTimerActive(true); // Start the timer when the \"Reset\" button is clicked\n  };\n\n  // Calculate the color based on remaining time\n  const getColorBasedOnTime = remainingTime => {\n    const totalDuration = selectedTime;\n    const timeElapsed = totalDuration - remainingTime;\n\n    // Define color stops and their respective time intervals\n    const colorStops = [{\n      color: '#004777',\n      threshold: 0.7\n    },\n    // Change to this color at 70% of the duration\n    {\n      color: '#F7B801',\n      threshold: 0.4\n    },\n    // Change to this color at 40% of the duration\n    {\n      color: '#A30000',\n      threshold: 0\n    } // Change to this color at 0% of the duration (end color)\n    ];\n\n    // Find the color stop whose threshold matches the current time progress\n    const matchingStop = colorStops.find(stop => timeElapsed >= totalDuration * stop.threshold);\n\n    // Return the color of the matching stop or the last color if none matches\n    return matchingStop ? matchingStop.color : colorStops[colorStops.length - 1].color;\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.App,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.timer_wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CountdownCircleTimer, {\n    key: selectedTime,\n    isPlaying: isTimerActive,\n    duration: selectedTime,\n    colors: [[getColorBasedOnTime, 0.33]] // Use getColorBasedOnTime function to set color\n    ,\n    onComplete: () => setIsTimerActive(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, ({\n    remainingTime\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.timer,\n    style: {\n      color: getColorBasedOnTime(selectedTime - remainingTime)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, \"Remaining\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, remainingTime), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, \"seconds\"))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedTime,\n    onChange: handleSelectChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, options.map(opt => /*#__PURE__*/React.createElement(\"option\", {\n    value: opt,\n    key: opt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, opt + ' sec'))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleResetClick,\n    className: \"btn btn-danger mx-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, \"Reset\")), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, \"Can you get this reset button to work?\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \"The reset button should reset as per the time selected in the dropdown\"))));\n};\nexport default TimerLoading;","map":{"version":3,"names":["React","useState","styles","CountdownCircleTimer","Navbar","options","TimerLoading","selectedTime","setSelectedTime","isTimerActive","setIsTimerActive","handleSelectChange","e","newValue","parseInt","target","value","handleResetClick","getColorBasedOnTime","remainingTime","totalDuration","timeElapsed","colorStops","color","threshold","matchingStop","find","stop","length","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","App","timer_wrapper","key","isPlaying","duration","colors","onComplete","timer","style","text","display","onChange","map","opt","onClick"],"sources":["E:/Files/Dashboard/src/Components/Timer/TimerLoading.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styles from './TimerLoading.module.css';\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\nimport Navbar from '../Pages/Navbar';\r\n\r\nconst options = [10, 20, 30, 40, 50];\r\n\r\nconst TimerLoading = () => {\r\n  const [selectedTime, setSelectedTime] = useState(10);\r\n  const [isTimerActive, setIsTimerActive] = useState(false);\r\n\r\n  const handleSelectChange = (e) => {\r\n    const newValue = parseInt(e.target.value);\r\n    setSelectedTime(newValue);\r\n    setIsTimerActive(false); // Stop the timer when a new value is selected\r\n  };\r\n\r\n  const handleResetClick = () => {\r\n    setIsTimerActive(true); // Start the timer when the \"Reset\" button is clicked\r\n  };\r\n\r\n  // Calculate the color based on remaining time\r\n  const getColorBasedOnTime = (remainingTime) => {\r\n    const totalDuration = selectedTime;\r\n    const timeElapsed = totalDuration - remainingTime;\r\n\r\n    // Define color stops and their respective time intervals\r\n    const colorStops = [\r\n      { color: '#004777', threshold: 0.7 }, // Change to this color at 70% of the duration\r\n      { color: '#F7B801', threshold: 0.4 }, // Change to this color at 40% of the duration\r\n      { color: '#A30000', threshold: 0 },   // Change to this color at 0% of the duration (end color)\r\n    ];\r\n\r\n    // Find the color stop whose threshold matches the current time progress\r\n    const matchingStop = colorStops.find((stop) => timeElapsed >= totalDuration * stop.threshold);\r\n\r\n    // Return the color of the matching stop or the last color if none matches\r\n    return matchingStop ? matchingStop.color : colorStops[colorStops.length - 1].color;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className={styles.App}>\r\n        <div className={styles.timer_wrapper}>\r\n          <CountdownCircleTimer\r\n            key={selectedTime}\r\n            isPlaying={isTimerActive}\r\n            duration={selectedTime}\r\n            colors={[[getColorBasedOnTime, 0.33]]} // Use getColorBasedOnTime function to set color\r\n            onComplete={() => setIsTimerActive(false)}\r\n          >\r\n            {({ remainingTime }) => (\r\n              <div\r\n                className={styles.timer}\r\n                style={{ color: getColorBasedOnTime(selectedTime - remainingTime) }}\r\n              >\r\n                <div className={styles.text}>Remaining</div>\r\n                <div className={styles.value}>{remainingTime}</div>\r\n                <div className={styles.text}>seconds</div>\r\n              </div>\r\n            )}\r\n          </CountdownCircleTimer>\r\n          <div style={{ display: 'flex' }}>\r\n            <select value={selectedTime} onChange={handleSelectChange}>\r\n              {options.map((opt) => (\r\n                <option value={opt} key={opt}>\r\n                  {opt + ' sec'}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <button onClick={handleResetClick} className='btn btn-danger mx-2'>\r\n              Reset\r\n            </button>\r\n          </div>\r\n          <h3>Can you get this reset button to work?</h3>\r\n          <h4>The reset button should reset as per the time selected in the dropdown</h4>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TimerLoading;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}