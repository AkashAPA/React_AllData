{"ast":null,"code":"var _jsxFileName = \"E:\\\\Files\\\\Dashboard\\\\src\\\\Components\\\\Timer\\\\TimerLoading.jsx\";\nimport React, { useState } from 'react';\nimport Countdown from 'react-countdown';\nimport styles from './TimerLoading.module.css';\nimport Navbar from '../Pages/Navbar';\nconst TimerLoading = () => {\n  const [selectedTime, setSelectedTime] = useState(10);\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  const handleSelectChange = e => {\n    const newValue = parseInt(e.target.value);\n    setSelectedTime(newValue);\n    setIsTimerActive(false);\n  };\n  const handleResetClick = () => {\n    setIsTimerActive(true);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.App,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.timer_wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Countdown, {\n    date: Date.now() + selectedTime * 1000,\n    onComplete: () => setIsTimerActive(false),\n    autoStart: isTimerActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.timer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }\n  }, \"Remaining\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CountdownRenderer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 15\n    }\n  }, \"seconds\"))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedTime,\n    onChange: handleSelectChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, [10, 20, 30, 40, 50].map(opt => /*#__PURE__*/React.createElement(\"option\", {\n    value: opt,\n    key: opt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, opt + ' sec'))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleResetClick,\n    className: \"btn btn-danger mx-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"Reset\")), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, \"Can you get this reset button to work?\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, \"The reset button should reset as per the time selected in the dropdown\"))));\n};\nconst CountdownRenderer = ({\n  formatted\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, formatted);\nexport default TimerLoading;","map":{"version":3,"names":["React","useState","Countdown","styles","Navbar","TimerLoading","selectedTime","setSelectedTime","isTimerActive","setIsTimerActive","handleSelectChange","e","newValue","parseInt","target","value","handleResetClick","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","App","timer_wrapper","date","Date","now","onComplete","autoStart","timer","text","CountdownRenderer","style","display","onChange","map","opt","key","onClick","formatted"],"sources":["E:/Files/Dashboard/src/Components/Timer/TimerLoading.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Countdown from 'react-countdown';\r\nimport styles from './TimerLoading.module.css';\r\nimport Navbar from '../Pages/Navbar';\r\n\r\nconst TimerLoading = () => {\r\n  const [selectedTime, setSelectedTime] = useState(10);\r\n  const [isTimerActive, setIsTimerActive] = useState(false);\r\n\r\n  const handleSelectChange = (e) => {\r\n    const newValue = parseInt(e.target.value);\r\n    setSelectedTime(newValue);\r\n    setIsTimerActive(false);\r\n  };\r\n\r\n  const handleResetClick = () => {\r\n    setIsTimerActive(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className={styles.App}>\r\n        <div className={styles.timer_wrapper}>\r\n          <Countdown\r\n            date={Date.now() + selectedTime * 1000}\r\n            onComplete={() => setIsTimerActive(false)}\r\n            autoStart={isTimerActive}\r\n          >\r\n            <div className={styles.timer}>\r\n              <div className={styles.text}>Remaining</div>\r\n              <div className={styles.value}>\r\n                <CountdownRenderer />\r\n              </div>\r\n              <div className={styles.text}>seconds</div>\r\n            </div>\r\n          </Countdown>\r\n          <div style={{ display: 'flex' }}>\r\n            <select value={selectedTime} onChange={handleSelectChange}>\r\n              {[10, 20, 30, 40, 50].map((opt) => (\r\n                <option value={opt} key={opt}>\r\n                  {opt + ' sec'}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <button onClick={handleResetClick} className=\"btn btn-danger mx-2\">\r\n              Reset\r\n            </button>\r\n          </div>\r\n          <h3>Can you get this reset button to work?</h3>\r\n          <h4>The reset button should reset as per the time selected in the dropdown</h4>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst CountdownRenderer = ({ formatted }) => <>{formatted}</>;\r\n\r\nexport default TimerLoading;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}