{"ast":null,"code":"var _jsxFileName = \"E:\\\\Files\\\\Dashboard\\\\src\\\\Components\\\\Timer\\\\TimerLoading.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport styles from './TimerLoading.module.css';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport Navbar from '../Pages/Navbar';\nconst renderTime = ({\n  remainingTime\n}) => {\n  if (remainingTime === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.timer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 12\n      }\n    }, \"Too late...\");\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.timer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, \"Remaining\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, remainingTime), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, \"seconds\"));\n};\nconst options = [10, 20, 30, 40, 50];\nconst colorStops = [{\n  color: '#004777',\n  threshold: 0.7\n}, {\n  color: '#F7B801',\n  threshold: 0.3\n}, {\n  color: '#A30000',\n  threshold: 0\n}];\nconst TimerLoading = () => {\n  const [selectedTime, setSelectedTime] = useState(10);\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  const [currentColor, setCurrentColor] = useState(colorStops[0].color);\n  const handleSelectChange = e => {\n    const newValue = parseInt(e.target.value);\n    setSelectedTime(newValue);\n    setIsTimerActive(false); // Stop the timer when a new value is selected\n    setCurrentColor(colorStops[0].color); // Reset color to the initial color\n  };\n\n  const handleResetClick = () => {\n    setIsTimerActive(true); // Start the timer when the \"Reset\" button is clicked\n  };\n\n  useEffect(() => {\n    const timerInterval = setInterval(() => {\n      // Calculate the elapsed percentage\n      const elapsedPercentage = (selectedTime - currentColor) / selectedTime;\n\n      // Determine the current color based on the elapsed percentage\n      for (const stop of colorStops) {\n        if (elapsedPercentage <= stop.threshold) {\n          setCurrentColor(stop.color);\n          break;\n        }\n      }\n    }, 1000);\n    return () => clearInterval(timerInterval);\n  }, [selectedTime, currentColor]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.App,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.timer_wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CountdownCircleTimer, {\n    key: selectedTime,\n    isPlaying: isTimerActive,\n    duration: selectedTime,\n    colors: [currentColor],\n    initialRemainingTime: selectedTime,\n    onComplete: () => setIsTimerActive(false) // Stop the timer when it completes\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, renderTime), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedTime,\n    onChange: handleSelectChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, options.map(opt => /*#__PURE__*/React.createElement(\"option\", {\n    value: opt,\n    key: opt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, opt + ' sec'))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleResetClick,\n    className: \"btn btn-danger mx-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"Reset\")), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, \"Can you get this reset button to work?\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, \"The reset button should reset as per the time selected in the dropdown\"))));\n};\nexport default TimerLoading;","map":{"version":3,"names":["React","useState","useEffect","styles","CountdownCircleTimer","Navbar","renderTime","remainingTime","createElement","className","timer","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","text","value","options","colorStops","color","threshold","TimerLoading","selectedTime","setSelectedTime","isTimerActive","setIsTimerActive","currentColor","setCurrentColor","handleSelectChange","e","newValue","parseInt","target","handleResetClick","timerInterval","setInterval","elapsedPercentage","stop","clearInterval","Fragment","App","timer_wrapper","key","isPlaying","duration","colors","initialRemainingTime","onComplete","style","display","onChange","map","opt","onClick"],"sources":["E:/Files/Dashboard/src/Components/Timer/TimerLoading.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styles from './TimerLoading.module.css';\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\nimport Navbar from '../Pages/Navbar';\r\n\r\nconst renderTime = ({ remainingTime }) => {\r\n  if (remainingTime === 0) {\r\n    return <div className={styles.timer}>Too late...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.timer}>\r\n      <div className={styles.text}>Remaining</div>\r\n      <div className={styles.value}>{remainingTime}</div>\r\n      <div className={styles.text}>seconds</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst options = [10, 20, 30, 40, 50];\r\nconst colorStops = [\r\n  { color: '#004777', threshold: 0.7 },\r\n  { color: '#F7B801', threshold: 0.3 },\r\n  { color: '#A30000', threshold: 0 },\r\n];\r\n\r\nconst TimerLoading = () => {\r\n  const [selectedTime, setSelectedTime] = useState(10);\r\n  const [isTimerActive, setIsTimerActive] = useState(false);\r\n  const [currentColor, setCurrentColor] = useState(colorStops[0].color);\r\n\r\n  const handleSelectChange = (e) => {\r\n    const newValue = parseInt(e.target.value);\r\n    setSelectedTime(newValue);\r\n    setIsTimerActive(false); // Stop the timer when a new value is selected\r\n    setCurrentColor(colorStops[0].color); // Reset color to the initial color\r\n  };\r\n\r\n  const handleResetClick = () => {\r\n    setIsTimerActive(true); // Start the timer when the \"Reset\" button is clicked\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timerInterval = setInterval(() => {\r\n      // Calculate the elapsed percentage\r\n      const elapsedPercentage = (selectedTime - currentColor) / selectedTime;\r\n\r\n      // Determine the current color based on the elapsed percentage\r\n      for (const stop of colorStops) {\r\n        if (elapsedPercentage <= stop.threshold) {\r\n          setCurrentColor(stop.color);\r\n          break;\r\n        }\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timerInterval);\r\n  }, [selectedTime, currentColor]);\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className={styles.App}>\r\n        <div className={styles.timer_wrapper}>\r\n          <CountdownCircleTimer\r\n            key={selectedTime}\r\n            isPlaying={isTimerActive}\r\n            duration={selectedTime}\r\n            colors={[currentColor]}\r\n            initialRemainingTime={selectedTime}\r\n            onComplete={() => setIsTimerActive(false)} // Stop the timer when it completes\r\n          >\r\n            {renderTime}\r\n          </CountdownCircleTimer>\r\n          <div style={{ display: 'flex' }}>\r\n            <select value={selectedTime} onChange={handleSelectChange}>\r\n              {options.map((opt) => (\r\n                <option value={opt} key={opt}>\r\n                  {opt + ' sec'}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <button onClick={handleResetClick} className='btn btn-danger mx-2'>\r\n              Reset\r\n            </button>\r\n          </div>\r\n          <h3>Can you get this reset button to work?</h3>\r\n          <h4>The reset button should reset as per the time selected in the dropdown</h4>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TimerLoading;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}