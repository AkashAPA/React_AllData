{"ast":null,"code":"var _jsxFileName = \"E:\\\\Files\\\\Dashboard\\\\src\\\\Components\\\\Timer\\\\TimerLoading.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport styles from './TimerLoading.module.css';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport Navbar from '../Pages/Navbar';\nconst renderTime = ({\n  remainingTime\n}) => {\n  if (remainingTime === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.timer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 12\n      }\n    }, \"Too late...\");\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.timer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, \"Remaining\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, remainingTime), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, \"seconds\"));\n};\nconst options = [10, 20, 30, 40, 50];\nconst TimerLoading = () => {\n  const [selectedTime, setSelectedTime] = useState(10);\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  const [elapsedPercentage, setElapsedPercentage] = useState(0);\n  const handleSelectChange = e => {\n    const newValue = parseInt(e.target.value);\n    setSelectedTime(newValue);\n    setIsTimerActive(false); // Stop the timer when a new value is selected\n    setElapsedPercentage(0); // Reset elapsedPercentage\n  };\n\n  const handleResetClick = () => {\n    setIsTimerActive(true); // Start the timer when the \"Reset\" button is clicked\n  };\n\n  useEffect(() => {\n    const timerInterval = setInterval(() => {\n      // Calculate the elapsed percentage\n      const elapsed = selectedTime - selectedTime * elapsedPercentage;\n      if (elapsed < selectedTime) {\n        setElapsedPercentage((elapsed + 1) / selectedTime);\n      }\n    }, 1000);\n    return () => clearInterval(timerInterval);\n  }, [selectedTime, elapsedPercentage]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.App,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.timer_wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CountdownCircleTimer, {\n    key: selectedTime // Add a key to the timer to force a re-render when selectedTime changes\n    ,\n    isPlaying: isTimerActive,\n    duration: selectedTime,\n    colors: ['#004777', '#F7B801', '#A30000', '#A30000'],\n    initialRemainingTime: selectedTime * (1 - elapsedPercentage),\n    onComplete: () => setIsTimerActive(false) // Stop the timer when it completes\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, renderTime), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedTime,\n    onChange: handleSelectChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, options.map(opt => /*#__PURE__*/React.createElement(\"option\", {\n    value: opt,\n    key: opt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, opt + ' sec'))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleResetClick,\n    className: \"btn btn-danger mx-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, \"Reset\")), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, \"Can you get this reset button to work?\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \"The reset button should reset as per the time selected in the dropdown\"))));\n};\nexport default TimerLoading;","map":{"version":3,"names":["React","useState","useEffect","styles","CountdownCircleTimer","Navbar","renderTime","remainingTime","createElement","className","timer","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","text","value","options","TimerLoading","selectedTime","setSelectedTime","isTimerActive","setIsTimerActive","elapsedPercentage","setElapsedPercentage","handleSelectChange","e","newValue","parseInt","target","handleResetClick","timerInterval","setInterval","elapsed","clearInterval","Fragment","App","timer_wrapper","key","isPlaying","duration","colors","initialRemainingTime","onComplete","style","display","onChange","map","opt","onClick"],"sources":["E:/Files/Dashboard/src/Components/Timer/TimerLoading.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styles from './TimerLoading.module.css';\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\nimport Navbar from '../Pages/Navbar';\r\n\r\nconst renderTime = ({ remainingTime }) => {\r\n  if (remainingTime === 0) {\r\n    return <div className={styles.timer}>Too late...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.timer}>\r\n      <div className={styles.text}>Remaining</div>\r\n      <div className={styles.value}>{remainingTime}</div>\r\n      <div className={styles.text}>seconds</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst options = [10, 20, 30, 40, 50];\r\nconst TimerLoading = () => {\r\n  const [selectedTime, setSelectedTime] = useState(10);\r\n  const [isTimerActive, setIsTimerActive] = useState(false);\r\n  const [elapsedPercentage, setElapsedPercentage] = useState(0);\r\n\r\n  const handleSelectChange = (e) => {\r\n    const newValue = parseInt(e.target.value);\r\n    setSelectedTime(newValue);\r\n    setIsTimerActive(false); // Stop the timer when a new value is selected\r\n    setElapsedPercentage(0); // Reset elapsedPercentage\r\n  };\r\n\r\n  const handleResetClick = () => {\r\n    setIsTimerActive(true); // Start the timer when the \"Reset\" button is clicked\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timerInterval = setInterval(() => {\r\n      // Calculate the elapsed percentage\r\n      const elapsed = selectedTime - selectedTime * elapsedPercentage;\r\n      if (elapsed < selectedTime) {\r\n        setElapsedPercentage((elapsed + 1) / selectedTime);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timerInterval);\r\n  }, [selectedTime, elapsedPercentage]);\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className={styles.App}>\r\n        <div className={styles.timer_wrapper}>\r\n          <CountdownCircleTimer\r\n            key={selectedTime} // Add a key to the timer to force a re-render when selectedTime changes\r\n            isPlaying={isTimerActive}\r\n            duration={selectedTime}\r\n            colors={['#004777', '#F7B801', '#A30000', '#A30000']}\r\n            initialRemainingTime={selectedTime * (1 - elapsedPercentage)}\r\n            onComplete={() => setIsTimerActive(false)} // Stop the timer when it completes\r\n          >\r\n            {renderTime}\r\n          </CountdownCircleTimer>\r\n          <div style={{ display: 'flex' }}>\r\n            <select value={selectedTime} onChange={handleSelectChange}>\r\n              {options.map((opt) => (\r\n                <option value={opt} key={opt}>\r\n                  {opt + ' sec'}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <button onClick={handleResetClick} className='btn btn-danger mx-2'>\r\n              Reset\r\n            </button>\r\n          </div>\r\n          <h3>Can you get this reset button to work?</h3>\r\n          <h4>The reset button should reset as per the time selected in the dropdown</h4>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TimerLoading;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}