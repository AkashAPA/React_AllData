{"ast":null,"code":"var _jsxFileName = \"E:\\\\Files\\\\Dashboard\\\\src\\\\Components\\\\Timer\\\\TimerLoading.jsx\";\nimport React, { useState } from 'react';\nimport styles from './TimerLoading.module.css';\n// import ReactDOM from \"react-dom\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nconst renderTime = ({\n  remainingTime\n}) => {\n  if (remainingTime === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.timer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 14\n      }\n    }, \"Too late...\");\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.timer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, \"Remaining\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, remainingTime), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, \"seconds\"));\n};\nconst options = [10, 20, 30, 40, 50];\nconst TimerLoading = () => {\n  const [selectedTime, setSelectedTime] = useState(10);\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  const handleSelectChange = e => {\n    const newValue = parseInt(e.target.value);\n    setSelectedTime(newValue);\n    setIsTimerActive(false); // Stop the timer when a new value is selected\n  };\n\n  const handleResetClick = () => {\n    setIsTimerActive(true); // Start the timer when the \"Reset\" button is clicked\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.App,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://www.reactlabs.ai/\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, \"React Labs\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }), \"ReactJS Assignment\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.timer - wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CountdownCircleTimer, {\n    key: selectedTime // Add a key to the timer to force a re-render when selectedTime changes\n    ,\n    isPlaying: isTimerActive,\n    duration: selectedTime,\n    colors: [[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]],\n    onComplete: () => setIsTimerActive(false) // Stop the timer when it completes\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, renderTime), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedTime,\n    onChange: handleSelectChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, options.map(opt => /*#__PURE__*/React.createElement(\"option\", {\n    value: opt,\n    key: opt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, opt + \" sec\"))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleResetClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, \"Reset\")), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"Can you get this reset button to work?\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"The reset button should reset as per the time selected in the dropdown\")));\n};\nexport default TimerLoading;","map":{"version":3,"names":["React","useState","styles","CountdownCircleTimer","renderTime","remainingTime","createElement","className","timer","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","text","value","options","TimerLoading","selectedTime","setSelectedTime","isTimerActive","setIsTimerActive","handleSelectChange","e","newValue","parseInt","target","handleResetClick","App","href","rel","wrapper","key","isPlaying","duration","colors","onComplete","style","display","onChange","map","opt","onClick"],"sources":["E:/Files/Dashboard/src/Components/Timer/TimerLoading.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styles from './TimerLoading.module.css'\r\n// import ReactDOM from \"react-dom\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\n\r\nconst renderTime = ({ remainingTime }) => {\r\n    if (remainingTime === 0) {\r\n      return <div className={styles.timer}>Too late...</div>;\r\n    }\r\n  \r\n    return (\r\n      <div className={styles.timer}>\r\n        <div className={styles.text}>Remaining</div>\r\n        <div className={styles.value}>{remainingTime}</div>\r\n        <div className={styles.text}>seconds</div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const options = [10, 20, 30, 40, 50];\r\nconst TimerLoading = () => {\r\n    const [selectedTime, setSelectedTime] = useState(10);\r\n    const [isTimerActive, setIsTimerActive] = useState(false);\r\n  \r\n    const handleSelectChange = (e) => {\r\n      const newValue = parseInt(e.target.value);\r\n      setSelectedTime(newValue);\r\n      setIsTimerActive(false); // Stop the timer when a new value is selected\r\n    };\r\n  \r\n    const handleResetClick = () => {\r\n      setIsTimerActive(true); // Start the timer when the \"Reset\" button is clicked\r\n    };\r\n  \r\n    return (\r\n      <div className={styles.App}>\r\n        <h1>\r\n          <a\r\n            href=\"https://www.reactlabs.ai/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            React Labs\r\n          </a>\r\n          <br />\r\n          ReactJS Assignment\r\n        </h1>\r\n        <div className={styles.timer-wrapper}>\r\n          <CountdownCircleTimer\r\n            key={selectedTime} // Add a key to the timer to force a re-render when selectedTime changes\r\n            isPlaying={isTimerActive}\r\n            duration={selectedTime}\r\n            colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n            onComplete={() => setIsTimerActive(false)} // Stop the timer when it completes\r\n          >\r\n            {renderTime}\r\n          </CountdownCircleTimer>\r\n          <div style={{ display: \"flex\" }}>\r\n            <select value={selectedTime} onChange={handleSelectChange}>\r\n              {options.map((opt) => (\r\n                <option value={opt} key={opt}>\r\n                  {opt + \" sec\"}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <button onClick={handleResetClick}>Reset</button>\r\n          </div>\r\n          <h3>Can you get this reset button to work?</h3>\r\n          <h4>The reset button should reset as per the time selected in the dropdown</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default TimerLoading;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}